
def build = (env.BUILD ?: "true").toBoolean()
def deploy = (env.DEPLOY ?: "true").toBoolean()
def mvnCommands = (env.mvnCommands == null) ? 'package' : env.mvnCommands
def mavenSettingsConfigMap = env.MAVEN_SETTINGS_CONFIG_MAP?.trim()
def test = (env.TEST ?: "true").toBoolean()

def image = (env.IMAGE ?: "hello-container").trim()
def alwaysPullImage = (env.ALWAYS_PULL_IMAGE == null) ? true : env.ALWAYS_PULL_IMAGE.toBoolean()
def libertyLicenseJarBaseUrl = (env.LIBERTY_LICENSE_JAR_BASE_URL ?: "").trim()
def registry = (env.REGISTRY ?: "icptest.icp:8500").trim()
if (registry && !registry.endsWith('/')) registry = "${registry}/"
def registrySecret = (env.REGISTRY_SECRET ?: "").trim()
def dockerUser = (env.DOCKER_USER ?: "admin").trim()
def dockerPassword = (env.DOCKER_PASSWORD ?: "5e914c585c2b51edfd1213f059dd38a3").trim()
def namespace = (env.NAMESPACE ?: "default").trim()
def serviceAccountName = (env.SERVICE_ACCOUNT_NAME ?: "default").trim()

def volumes = [ hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock') ]
if (registrySecret) {
  volumes += secretVolume(secretName: registrySecret, mountPath: '/msb_reg_sec')
}

podTemplate(
    label: 'test',
    containers: [
        containerTemplate(name: 'maven', image: 'maven:3.6.0-jdk-8-alpine', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'docker', image: 'docker:18.06.1-ce', command: 'cat', ttyEnabled: true,
            envVars: [
                containerEnvVar(key: 'DOCKER_API_VERSION', value: '1.23.0')
            ]),
        // containerTemplate(name: 'kubectl', image: kubectl, ttyEnabled: true, command: 'cat'),
        // containerTemplate(name: 'helm', image: helm, ttyEnabled: true, command: 'cat')
    ],
    volumes: volumes
    ) {
        node('test'){
	    def gitCommit
            def previousCommit
            def gitCommitMessage
            def fullCommitID
	    
	    def imageTag = null

            stage ('Extract') {
	       try {
                  checkout scm
                  fullCommitID = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
                  gitCommit = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                  previousCommitStatus = sh(script: 'git rev-parse -q --short HEAD~1', returnStatus: true)      
                  // If no previous commit is found, below commands need not run but build should continue
                  // Only run when a previous commit exists to avoid pipeline fail on exit code
                  if (previousCommitStatus == 0){ 
                     previousCommit = sh(script: 'git rev-parse -q --short HEAD~1', returnStdout: true).trim()
                     echo "Previous commit exists: ${previousCommit}"
                  }
                  gitCommitMessage = sh(script: 'git log --format=%B -n 1 ${gitCommit}', returnStdout: true)
	          gitCommitMessage = gitCommitMessage.replace("'", "\'");
                  echo "Git commit message is: ${gitCommitMessage}"
                  echo "Checked out git commit ${gitCommit}"
               } catch(Exception ex) {
                  print "Error in Extract: " + ex.toString()
               }
	    }
            stage ('Maven Build') {
               try {
                   container ('maven') {
                       def mvnCommand = "mvn -B"
                       if (mavenSettingsConfigMap) {
                           mvnCommand += " --settings /msb_mvn_cfg/settings.xml"
                       }
                       mvnCommand += " ${mvnCommands}"
                       sh mvnCommand
		       echo 'Finished Maven Build'
                   }
               } catch(Exception ex) {
                   print "Error in Maven build:" + ex.toString()
               }
            }
            stage('Build'){
	       try {
                  // checkout scm
                  container('docker') {
                     echo 'Start Building Image'
		     
		     imageTag = gitCommit
                     def buildCommand = "docker build -t ${image}:${imageTag} "
                     buildCommand += "--label org.label-schema.schema-version=\"1.0\" "
                     // def scmUrl = scm.getUserRemoteConfigs()[0].getUrl()
                     // buildCommand += "--label org.label-schema.vcs-url=\"${scmUrl}\" "
                     buildCommand += "--label org.label-schema.vcs-ref=\"${gitCommit}\" "  
                     buildCommand += "--label org.label-schema.name=\"${image}\" "
                     def buildDate = sh(returnStdout: true, script: "date -Iseconds").trim()
                     buildCommand += "--label org.label-schema.build-date=\"${buildDate}\" "
                     if (alwaysPullImage) {
                        buildCommand += " --pull=true"
                     }
                     if (previousCommit) {
                        buildCommand += " --cache-from ${registry}${image}:${previousCommit}"
                     }
                     if (libertyLicenseJarBaseUrl) {
                        if (readFile('Dockerfile').contains('LICENSE_JAR_URL')) {
                           buildCommand += " --build-arg LICENSE_JAR_URL=" + libertyLicenseJarBaseUrl
                           if (!libertyLicenseJarBaseUrl.endsWith("/")) {
                              buildCommand += "/"
                           }
                           buildCommand += libertyLicenseJarName
                        }
                     }
                     buildCommand += " ."
		     if (registrySecret) {
                        sh "ln -s -f /msb_reg_sec/.dockercfg /home/jenkins/.dockercfg"
                        sh "mkdir -p /home/jenkins/.docker"
                        sh "ln -s -f /msb_reg_sec/.dockerconfigjson /home/jenkins/.docker/config.json"
                     }
                     sh buildCommand
                     if (registry) {
		        sh "docker login -u=${dockerUser} -p=${dockerPassword} ${registry}"
			echo "Tagging image ${image}:${imageTag} ${registry}${namespace}/${image}:${imageTag}"
                        sh "docker tag ${image}:${imageTag} ${registry}${namespace}/${image}:${imageTag}"
		        echo 'Pushing to Docker registry'
                        sh "docker push ${registry}${namespace}${image}:${imageTag}"
		        'Done pushing to Docker registry'
                     }
		  }
               } catch(Exception ex) {
                   print "Error in Docker build: " + ex.toString()
	       }
            }
         }
      }
