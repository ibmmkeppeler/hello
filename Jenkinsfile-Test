def volumes = [ hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock') ]
def mavenSettingsConfigMap = env.MAVEN_SETTINGS_CONFIG_MAP?.trim()

def build = (env.BUILD ?: "true").toBoolean()
def deploy = (env.DEPLOY ?: "true").toBoolean()
def mvnCommands = (env.mvnCommands == null) ? 'package' : env.mvnCommands
def test = (env.TEST ?: "true").toBoolean()


podTemplate(
    label: 'test',
    containers: [
        containerTemplate(name: 'maven', image: 'maven:3.6.0-jdk-8-alpine', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'docker', image: 'docker:18.06.1-ce', command: 'cat', ttyEnabled: true,
            envVars: [
                containerEnvVar(key: 'DOCKER_API_VERSION', value: '1.23.0')
            ]),
        // containerTemplate(name: 'kubectl', image: kubectl, ttyEnabled: true, command: 'cat'),
        // containerTemplate(name: 'helm', image: helm, ttyEnabled: true, command: 'cat')
    ],
    volumes: volumes
    ) {
        node('test'){
	    def gitCommit
            def previousCommit
            def gitCommitMessage
            def fullCommitID

            stage ('Extract') {
	       try {
                  checkout scm
                  fullCommitID = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
                  gitCommit = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                  previousCommitStatus = sh(script: 'git rev-parse -q --short HEAD~1', returnStatus: true)      
                  // If no previous commit is found, below commands need not run but build should continue
                  // Only run when a previous commit exists to avoid pipeline fail on exit code
                  if (previousCommitStatus == 0){ 
                     previousCommit = sh(script: 'git rev-parse -q --short HEAD~1', returnStdout: true).trim()
                     echo "Previous commit exists: ${previousCommit}"
                  }
                  gitCommitMessage = sh(script: 'git log --format=%B -n 1 ${gitCommit}', returnStdout: true)
	          gitCommitMessage = gitCommitMessage.replace("'", "\'");
                  echo "Git commit message is: ${gitCommitMessage}"
                  echo "Checked out git commit ${gitCommit}"
               } catch(Exception ex) {
                  print "Error in Extract: " + ex.toString()
               }
	    }
            stage ('Maven Build') {
               try {
                   container ('maven') {
                       def mvnCommand = "mvn -B"
                       if (mavenSettingsConfigMap) {
                           mvnCommand += " --settings /msb_mvn_cfg/settings.xml"
                       }
                       mvnCommand += " ${mvnCommands}"
                       sh mvnCommand
		       echo 'Finished Maven Build'
                   }
               } catch(Exception ex) {
                   print "Error in Maven build:" + ex.toString()
               }
            }
            stage('Build'){
                checkout scm
                container('docker') {
                    sh """
                    echo 'Start Building'
                    #!/bin/bash
                    docker build -t hello-container:latest .
                    echo 'Finished Building Image'
                    """
                }
            }
        }
    }
