def volumes = [ hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock') ]
def mavenSettingsConfigMap = env.MAVEN_SETTINGS_CONFIG_MAP?.trim()

def build = (env.BUILD ?: "true").toBoolean()
def deploy = (env.DEPLOY ?: "true").toBoolean()
def mvnCommands = (env.mvnCommands == null) ? 'package' : env.mvnCommands
def test = (env.TEST ?: "true").toBoolean()


podTemplate(
    label: 'test',
    containers: [
        containerTemplate(name: 'maven', image: 'maven:3.6.0-jdk-8-alpine', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'docker', image: 'docker:18.06.1-ce', command: 'cat', ttyEnabled: true,
            envVars: [
                containerEnvVar(key: 'DOCKER_API_VERSION', value: '1.23.0')
            ]),
        // containerTemplate(name: 'kubectl', image: kubectl, ttyEnabled: true, command: 'cat'),
        // containerTemplate(name: 'helm', image: helm, ttyEnabled: true, command: 'cat')
    ],
    volumes: volumes
    ) {
        node('test'){
            stage ('Maven Build') {
               try {
                   container ('maven') {
                       def mvnCommand = "mvn -B"
                       if (mavenSettingsConfigMap) {
                           mvnCommand += " --settings /msb_mvn_cfg/settings.xml"
                       }
                       mvnCommand += " ${mvnCommands}"
                       sh mvnCommand
	                   printTime("Done Maven build")
                   }
               } catch(Exception ex) {
                   print "Error in Maven build:" + ex.toString()
               }
            }
            stage('Build'){
                checkout scm
                container('docker') {
                    sh """
                    echo 'Start Building'
                    #!/bin/bash
                    docker build -t hello-container:latest .
                    echo 'Finished Building Image'
                    """
                }
            }
        }
    }
